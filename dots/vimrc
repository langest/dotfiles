" be iMproved, required
set nocompatible

" Vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" colorschemes
Plugin 'twerth/ir_black'
Plugin 'tomasr/molokai'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'airblade/vim-gitgutter'

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ

" Set update time for git-gutter
set updatetime=100

" Enable line numbering
set nu

" Set default style of netrw
let g:netrw_liststyle = 3

" Reload files changed outside vim
set autoread

"set numberformat to always be in decimal
set nrformats=

" COLOR
set t_Co=256
let g:hybrid_use_Xresources = 1
colorscheme ir_black

" Ignore case when searching
set ignorecase

" Highlight search results
set hlsearch

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding
set encoding=utf8

" Tab indention
set autoindent
set smartindent

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2

" Highlight cursor line
set cul
hi CursorLine term=none cterm=none ctermbg=236

" Always keep away from bottom/top
set scrolloff=8

" Write with sudo using w!!
cmap w!! %!sudo tee > /dev/null %

" 80th column mark
if (exists('+colorcolumn'))
    set colorcolumn=80
    highlight ColorColumn ctermbg=8
endif

" Bubble text
nmap <C-k> ddkP
nmap <C-j> ddp
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]
nmap <C-Up> ddkP
nmap <C-Down> ddp
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Return to old position when reopening files
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Remove trailing whitespace in the entire file
function! <SID>StripTrailingWhitespaces()
	Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history,
	and cursor position
	let @/=_s
	call cursor(l, c)
endfunction

" Bind the removal of trailing whitespace to F5
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

""""""""""""""""""""
" Haskell settings "
""""""""""""""""""""
" Tab specific option
au BufEnter *.hs set tabstop=4     "A tab is 4 spaces
au BufEnter *.hs set expandtab     "Always uses spaces instead of tabs
au BufEnter *.hs set softtabstop=4 "Insert 4 spaces when tab is pressed
au BufEnter *.hs set shiftwidth=4  "An indent is 2 spaces
au BufEnter *.hs set shiftround    "Round indent to nearest shiftwidth multiple


"""""""""""""""""""""""""""""""""""""""""""
"" Improved status line
set laststatus=2
hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black
function! MyStatusLine(mode)
	let statusline=""
	if a:mode == 'Enter'
		let statusline.="%#StatColor#"
	endif
	let statusline.="\(%n\)\ %f\ "
	if a:mode == 'Enter'
		let statusline.="%*"
	endif
	let statusline.="%#Modified#%m"
	if a:mode == 'Leave'
		let statusline.="%*%r"
	elseif a:mode == 'Enter'
		let statusline.="%r%*"
	endif
	let statusline .= "\ (%l/%L,\ %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "
	return statusline
endfunction
au WinEnter * setlocal statusline=%!MyStatusLine('Enter')
au WinLeave * setlocal statusline=%!MyStatusLine('Leave')
set statusline=%!MyStatusLine('Enter')
function! InsertStatuslineColor(mode)
	if a:mode == 'i'
		hi StatColor guibg=orange ctermbg=lightred
	elseif a:mode == 'r'
		hi StatColor guibg=#e454ba ctermbg=magenta
	elseif a:mode == 'v'
		hi StatColor guibg=#e454ba ctermbg=magenta
	else
		hi StatColor guibg=red ctermbg=red
	endif
endfunction
au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
" /Improved status line
""""""""""""""""""""""""""""""""""""""""

"Remove Ex mode
noremap Q <NOP>
"Remove pgup pgdown
noremap <PageUp> <NOP>
noremap <PageDown> <NOP>
inoremap <PageUp> <NOP>
inoremap <PageDown> <NOP>

"Break the habit of using arrowkeys for navigation
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
"Ignore arrowkeys in insert mode
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
"Break the habit of using hjkl for slow navigation, just for practice to.
"Shall be in comment in the long run when the good habit has set.
"noremap h <NOP>
"noremap j <NOP>
"noremap k <NOP>
"noremap l <NOP>
